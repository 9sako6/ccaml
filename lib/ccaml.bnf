<program> ::= <function>
<function> ::= "int" <id> "(" ")" "{" { <block-item> } "}"
<block-item> ::= <statement> | <declaration>
<statement> ::= "return" <exp> ";"
  | <exp> ";"
  | "if" "(" <exp> ")" <statement> [ "else" <statement> ]
<declaration> := "int" <id> [ = <exp>] ";"
<exp> ::= <id> "=" <exp> | <conditional-exp>
<conditional-exp> ::= <or-exp> [ "?" <exp> ":" <conditional-exp> ]
<or-exp> ::= <and-exp> { "||" <and-exp> }
<and-exp> ::= <equality-exp> { "&&" <equality-exp> }
<equality-exp> ::= <comparison-exp> { ("==" | "!=" ) <comparison-exp> }
<comparison-exp> ::= <add-sub-exp> { ("<" | "<=" | ">" | ">=" ) <add-sub-exp> }
<add-sub-exp> ::= <mult-div-exp> { ("+" | "-") <mult-div-exp> }
<mult-div-exp> ::= <factor> { ("*" | "/") <factor> }
/* <factor> is a symbol for unary operators. <factor> has higher precedence than binary operators. */
<factor> ::= "(" <exp> ")" | <unary_op> <factor> | <int> | <id>
<unary_op> ::= "!" | "-" | "~"
