-- add.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $3, %rax
  pushq %rax
  mov $7, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- and.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  jne right_of_and_clause_0
  jmp goal_of_and_clause_0
right_of_and_clause_0:
  mov $4, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_and_clause_0:
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov $4, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign2.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign3.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -8(%rbp)
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign_ternary.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  mov $1, %rax
  cmp $0, %rax
  je ternary_else_1
  mov $2, %rax
  jmp ternary_after_else_1
ternary_else_1:
  mov $3, %rax
ternary_after_else_1:
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- associativity.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $31, %rax
  pushq %rax
  mov $2, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov $6, %rax
  pushq %rax
  mov $7, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- associativity2.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $31, %rax
  pushq %rax
  mov $2, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov $6, %rax
  pushq %rax
  mov $7, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  pushq %rax
  mov $9, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %rax
  je right_of_or_clause_2
  mov $1, %rax
  jmp goal_of_or_clause_2
right_of_or_clause_2:
  mov $1, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_2:
  mov %rbp, %rsp
  pop %rbp
  ret

-- block.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $4, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block2.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block3.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $4, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block4.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $4, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block5.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block6.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block7.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -24(%rbp)
  mov -16(%rbp), %rax
  pushq %rax
  mov -24(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block8.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov $3, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block_nested.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je after_else_3
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_3
after_else_3:

-- declare_var.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- div.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $20, %rax
  pushq %rax
  mov $4, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  mov %rbp, %rsp
  pop %rbp
  ret

-- else.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $0, %rax
  cmp $0, %rax
  je else_4
  mov $2, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_4
else_4:
  mov $3, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_4:

-- eq.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  sete %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- greater.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setg %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- greater_or_equal.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setge %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- if.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  je after_else_5
  mov $2, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_5
after_else_5:

-- if_else.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  je else_6
  mov $2, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_6
else_6:
  mov $1, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_6:

-- if_nested.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  cmp $0, %rax
  je else_7
  mov $1, %rax
  mov %rax, -16(%rbp)
  jmp after_else_7
else_7:
  mov -16(%rbp), %rax
  cmp $0, %rax
  je after_else_8
  mov $2, %rax
  mov %rax, -16(%rbp)
  jmp after_else_8
after_else_8:
after_else_7:
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- if_nested_block.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  cmp $0, %rax
  je else_9
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_9
else_9:
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je else_10
  mov $4, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_10
else_10:
  mov $5, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_10:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_9:

-- less.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- less_or_equal.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setle %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- mult.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- not_eq.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setne %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- or.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  cmp $0, %rax
  je right_of_or_clause_11
  mov $1, %rax
  jmp goal_of_or_clause_11
right_of_or_clause_11:
  mov $0, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_11:
  mov %rbp, %rsp
  pop %rbp
  ret

-- or2.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $0, %rax
  cmp $0, %rax
  je right_of_or_clause_13
  mov $1, %rax
  jmp goal_of_or_clause_13
right_of_or_clause_13:
  mov $0, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_13:
  cmp $0, %rax
  je right_of_or_clause_12
  mov $1, %rax
  jmp goal_of_or_clause_12
right_of_or_clause_12:
  mov $1, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_12:
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_29.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $29, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_exclamation_1.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  sete %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_minus_42.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $42, %rax
  neg %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_tilde_42.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $42, %rax
  not %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- sub.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $3, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- sub_neg.c --
.globl  main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  pushq %rax
  mov $1, %rax
  neg %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- add.c --
12
-- and.c --
1
-- assign.c --
4
-- assign2.c --
5
-- assign3.c --
3
-- assign_ternary.c --
2
-- associativity.c --
9
-- associativity2.c --
1
-- block.c --
4
-- block2.c --
1
-- block3.c --
4
-- block4.c --
3
-- block5.c --
1
-- block6.c --
3
-- block7.c --
4
-- block8.c --
3
-- block_nested.c --
3
-- declare_var.c --
2
-- div.c --
2
-- else.c --
3
-- eq.c --
0
-- greater.c --
1
-- greater_or_equal.c --
1
-- if.c --
2
-- if_else.c --
2
-- if_nested.c --
1
-- if_nested_block.c --
4
-- less.c --
0
-- less_or_equal.c --
0
-- mult.c --
12
-- not_eq.c --
1
-- or.c --
1
-- or2.c --
1
-- return_29.c --
29
-- return_exclamation_1.c --
0
-- return_minus_42.c --
214
-- return_tilde_42.c --
213
-- sub.c --
1
-- sub_neg.c --
3
