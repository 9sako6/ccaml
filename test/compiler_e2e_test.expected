-- add.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $3, %rax
  pushq %rax
  mov $7, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- and.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  jne right_of_and_clause_0
  jmp goal_of_and_clause_0
right_of_and_clause_0:
  mov $4, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_and_clause_0:
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov $4, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign2.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign3.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -8(%rbp)
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- assign_ternary.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  mov $1, %rax
  cmp $0, %rax
  je ternary_else_1
  mov $2, %rax
  jmp ternary_after_else_1
ternary_else_1:
  mov $3, %rax
ternary_after_else_1:
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- associativity.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $31, %rax
  pushq %rax
  mov $2, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov $6, %rax
  pushq %rax
  mov $7, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- associativity2.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $31, %rax
  pushq %rax
  mov $2, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov $6, %rax
  pushq %rax
  mov $7, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  pushq %rax
  mov $9, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %rax
  je right_of_or_clause_2
  mov $1, %rax
  jmp goal_of_or_clause_2
right_of_or_clause_2:
  mov $1, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_2:
  mov %rbp, %rsp
  pop %rbp
  ret

-- block.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $4, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block2.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block3.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $4, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block4.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $4, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block5.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block6.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block7.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -24(%rbp)
  mov -16(%rbp), %rax
  pushq %rax
  mov -24(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block8.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov $3, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- block_nested.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je after_else_3
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_3
after_else_3:

-- declare_var.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- div.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $20, %rax
  pushq %rax
  mov $4, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  cqo
  idiv %rcx
  mov %rbp, %rsp
  pop %rbp
  ret

-- else.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $0, %rax
  cmp $0, %rax
  je else_4
  mov $2, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_4
else_4:
  mov $3, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_4:

-- eq.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  sete %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- expression_args.c --
  .global add
add:
  push %rbp
  movq %rsp, %rbp
  mov 16(%rbp), %rax
  pushq %rax
  mov 24(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $4, %rax
  mov %rax, %rsi
  pushq %rax
  mov $1, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, %rsi
  pushq %rax
  call add
  add $16, %rsp
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -8(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- fib.c --
  .global fib
fib:
  push %rbp
  movq %rsp, %rbp
  mov 16(%rbp), %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %rax
  je right_of_or_clause_6
  mov $1, %rax
  jmp goal_of_or_clause_6
right_of_or_clause_6:
  mov 16(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  sete %al
  movzb %al, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_6:
  cmp $0, %rax
  je else_5
  mov 16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_5
else_5:
  mov 16(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, %rdi
  pushq %rax
  call fib
  add $8, %rsp
  pushq %rax
  mov 16(%rbp), %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, %rdi
  pushq %rax
  call fib
  add $8, %rsp
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_5:
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $5, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  mov %rax, %rdi
  pushq %rax
  call fib
  add $8, %rsp
  mov %rbp, %rsp
  pop %rbp
  ret

-- for.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L7:
  mov -8(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L9
  mov -8(%rbp), %rax
  mov %rax, -16(%rbp)
L8:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L7
L9:
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for2.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov %rax, -8(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L10:
  mov -8(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L12
L11:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L10
L12:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for3.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L13:
  mov -8(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L15
  mov -8(%rbp), %rax
  mov %rax, -16(%rbp)
L14:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L13
L15:
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for4.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -16(%rbp)
L16:
  mov -16(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setle %al
  movzb %al, %rax
  cmp $0, %rax
  je L18
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
L17:
  mov -16(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -16(%rbp)
  jmp L16
L18:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for5.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
L19:
  mov -16(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L21
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -24(%rbp)
L22:
  mov -24(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L24
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  pushq %rax
  mov -24(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
L23:
  mov -24(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -24(%rbp)
  jmp L22
L24:
L20:
  mov -16(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -16(%rbp)
  jmp L19
L21:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for6.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L25:
  mov -8(%rbp), %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L27
  mov -8(%rbp), %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  mov %rax, -8(%rbp)
L26:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L25
L27:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for_break.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov %rax, -8(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L28:
  mov -8(%rbp), %rax
  pushq %rax
  mov $100, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L30
  mov -8(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setg %al
  movzb %al, %rax
  cmp $0, %rax
  je after_else_31
  jmp L30
  jmp after_else_31
after_else_31:
L29:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L28
L30:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- for_continue.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L32:
  mov -8(%rbp), %rax
  pushq %rax
  mov $100, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L34
  mov -8(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setg %al
  movzb %al, %rax
  cmp $0, %rax
  je after_else_35
  jmp L33
  jmp after_else_35
after_else_35:
  mov -16(%rbp), %rax
  pushq %rax
  mov -8(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -16(%rbp)
L33:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L32
L34:
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- forward_decl_multi_arg.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  mov %rax, %rsi
  pushq %rax
  mov $1, %rax
  mov %rax, %rsi
  pushq %rax
  call foo
  add $16, %rsp
  mov %rbp, %rsp
  pop %rbp
  ret
  .global foo
foo:
  push %rbp
  movq %rsp, %rbp
  mov 16(%rbp), %rax
  pushq %rax
  mov 24(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- greater.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setg %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- greater_or_equal.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setge %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- hello_world.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $72, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $101, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $108, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $108, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $111, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $44, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $32, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $87, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $111, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $114, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $108, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $100, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $33, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $10, %rax
  mov %rax, %rdi
  pushq %rax
  call putchar
  add $8, %rsp
  mov $0, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- if.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  je after_else_36
  mov $2, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_36
after_else_36:

-- if_else.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  je else_37
  mov $2, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_37
else_37:
  mov $1, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_37:

-- if_nested.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $1, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  cmp $0, %rax
  je else_38
  mov $1, %rax
  mov %rax, -16(%rbp)
  jmp after_else_38
else_38:
  mov -16(%rbp), %rax
  cmp $0, %rax
  je after_else_39
  mov $2, %rax
  mov %rax, -16(%rbp)
  jmp after_else_39
after_else_39:
after_else_38:
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- if_nested_block.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  mov -8(%rbp), %rax
  cmp $0, %rax
  je else_40
  sub $8, %rsp
  mov $2, %rax
  mov %rax, -16(%rbp)
  mov -16(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_40
else_40:
  sub $8, %rsp
  mov $3, %rax
  mov %rax, -16(%rbp)
  mov -8(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je else_41
  mov $4, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  jmp after_else_41
else_41:
  mov $5, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
after_else_41:
after_else_40:
  mov -8(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- less.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- less_or_equal.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setle %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- mult.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  imul %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- nested_for_break.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -8(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -16(%rbp)
  sub $8, %rsp
  mov $0, %rax
  mov %rax, -24(%rbp)
  mov $0, %rax
  mov %rax, -8(%rbp)
L42:
  mov -8(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L44
  mov $0, %rax
  mov %rax, -16(%rbp)
L45:
  mov -16(%rbp), %rax
  pushq %rax
  mov $10, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setl %al
  movzb %al, %rax
  cmp $0, %rax
  je L47
  mov -24(%rbp), %rax
  pushq %rax
  mov -16(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rax, -24(%rbp)
  mov -16(%rbp), %rax
  pushq %rax
  mov $4, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setg %al
  movzb %al, %rax
  cmp $0, %rax
  je after_else_48
  jmp L47
  jmp after_else_48
after_else_48:
L46:
  mov -16(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -16(%rbp)
  jmp L45
L47:
  mov -24(%rbp), %rax
  pushq %rax
  mov -8(%rbp), %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -24(%rbp)
L43:
  mov -8(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rax, -8(%rbp)
  jmp L42
L44:
  mov -24(%rbp), %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- no_args.c --
  .global three
three:
  push %rbp
  movq %rsp, %rbp
  mov $3, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  call three
  add $0, %rsp
  mov %rbp, %rsp
  pop %rbp
  ret

-- not_eq.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  pushq %rax
  mov $0, %rax
  mov %rax, %rcx
  popq %rax
  cmp %rcx, %rax
  setne %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- one_arg.c --
  .global foo
foo:
  push %rbp
  movq %rsp, %rbp
  mov 16(%rbp), %rax
  pushq %rax
  mov $1, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $10, %rax
  mov %rax, %rdi
  pushq %rax
  call foo
  add $8, %rsp
  mov %rbp, %rsp
  pop %rbp
  ret

-- or.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  cmp $0, %rax
  je right_of_or_clause_49
  mov $1, %rax
  jmp goal_of_or_clause_49
right_of_or_clause_49:
  mov $0, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_49:
  mov %rbp, %rsp
  pop %rbp
  ret

-- or2.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $0, %rax
  cmp $0, %rax
  je right_of_or_clause_51
  mov $1, %rax
  jmp goal_of_or_clause_51
right_of_or_clause_51:
  mov $0, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_51:
  cmp $0, %rax
  je right_of_or_clause_50
  mov $1, %rax
  jmp goal_of_or_clause_50
right_of_or_clause_50:
  mov $1, %rax
  cmp $0, %rax
  setne %al
  movzb %al, %rax
goal_of_or_clause_50:
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_29.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $29, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_exclamation_1.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $1, %rax
  cmp $0, %rax
  sete %al
  movzb %al, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_minus_42.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $42, %rax
  neg %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- return_tilde_42.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $42, %rax
  not %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- sub.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $3, %rax
  pushq %rax
  mov $2, %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- sub_neg.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $2, %rax
  pushq %rax
  mov $1, %rax
  neg %rax
  mov %rax, %rcx
  popq %rax
  sub %rcx, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- unused_exp.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $3, %rax
  pushq %rax
  mov $3, %rax
  mov %rax, %rcx
  popq %rax
  add %rcx, %rax
  mov $0, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- unused_exp2.c --
  .global main
main:
  push %rbp
  movq %rsp, %rbp
  mov $0, %rax
  mov %rbp, %rsp
  pop %rbp
  ret

-- add.c --
12
-- and.c --
1
-- assign.c --
4
-- assign2.c --
5
-- assign3.c --
3
-- assign_ternary.c --
2
-- associativity.c --
9
-- associativity2.c --
1
-- block.c --
4
-- block2.c --
1
-- block3.c --
4
-- block4.c --
3
-- block5.c --
1
-- block6.c --
3
-- block7.c --
4
-- block8.c --
3
-- block_nested.c --
3
-- declare_var.c --
2
-- div.c --
2
-- else.c --
3
-- eq.c --
0
-- expression_args.c --
14
-- fib.c --
5
-- for.c --
9
-- for2.c --
10
-- for3.c --
9
-- for4.c --
55
-- for5.c --
132
-- for6.c --
3
-- for_break.c --
11
-- for_continue.c --
55
-- forward_decl_multi_arg.c --
255
-- greater.c --
1
-- greater_or_equal.c --
1
-- hello_world.c --
Hello, World!
0
-- if.c --
2
-- if_else.c --
2
-- if_nested.c --
1
-- if_nested_block.c --
4
-- less.c --
0
-- less_or_equal.c --
0
-- mult.c --
12
-- nested_for_break.c --
151
-- no_args.c --
3
-- not_eq.c --
1
-- one_arg.c --
11
-- or.c --
1
-- or2.c --
1
-- return_29.c --
29
-- return_exclamation_1.c --
0
-- return_minus_42.c --
214
-- return_tilde_42.c --
213
-- sub.c --
1
-- sub_neg.c --
3
-- unused_exp.c --
0
-- unused_exp2.c --
0
